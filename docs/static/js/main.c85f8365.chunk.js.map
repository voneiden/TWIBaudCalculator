{"version":3,"sources":["App.js","index.js"],"names":["I2CSpec","id","name","maxKHzBus","maxNanoRise","maxPF","maxLowVoltage","maxLowVoltageBelowTwo","NaN","vcc","FormModel","types","model","twiMode","optional","number","string","pF","kOhm","MHzMcu","kHzBus","actions","self","setTwiMode","spec","toString","setVcc","setPF","setKOhm","setMHzMcu","setKHzBus","store","form","views","parseFloat","sinkMA","riseTime","nanoRiseTime","create","TWIMode","observer","modeSelectors","map","key","onClick","e","className","frequency","value","suffix","divider","Math","trunc","friendlyFrequency","RiseTimeCalculator","minR","maxR","isNaN","onChange","target","toFixed","BaudRateCalculator","props","baud","MainView","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c85f8365.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\nimport {types} from \"mobx-state-tree\";\nimport {observer} from \"mobx-react\";\n\nconst I2CSpec = [\n  {\n    id: 0,\n    name: 'Standard Mode',\n    maxKHzBus: 100,\n    maxNanoRise: 1000,\n    maxPF: 400,\n    maxLowVoltage: 0.4,\n    maxLowVoltageBelowTwo: () => NaN\n  },\n  {\n    id: 1,\n    name: 'Fast Mode',\n    maxKHzBus: 400,\n    maxNanoRise: 300,\n    maxPF: 400,\n    maxLowVoltage: 0.4,\n    maxLowVoltageBelowTwo: vcc => 0.2 * vcc\n  },\n  {\n    id: 2,\n    name: 'Fast Mode Plus',\n    maxKHzBus: 1000,\n    maxNanoRise: 120,\n    maxPF: 550,\n    maxLowVoltage: 0.4,\n    maxLowVoltageBelowTwo: vcc => 0.2 * vcc\n  }\n]\n\nconst FormModel = types.model({\n  twiMode: types.optional(types.number, 0),\n  vcc: types.optional(types.string, '5.0'),\n  pF: types.optional(types.string, '40'),\n  kOhm: types.optional(types.string, '4.7'),\n  MHzMcu: types.optional(types.string, '20'),\n  kHzBus: types.optional(types.string, '100'),\n}).actions(self => ({\n  setTwiMode: function setTwiMode(twiMode) {\n    self.twiMode = twiMode\n    const spec = I2CSpec[twiMode]\n    self.kHzBus = spec.maxKHzBus.toString()\n  },\n  setVcc: function setVcc(vcc) {\n    self.vcc = vcc\n  },\n  setPF: function setPf(pF) {\n    self.pF = pF\n  },\n  setKOhm: function setKOhm(kOhm) {\n    self.kOhm = kOhm\n  },\n  setMHzMcu: function setMHzMcu(MHzMcu) {\n    self.MHzMcu = MHzMcu\n  },\n  setKHzBus: function setKHzBus(kHzBus) {\n    self.kHzBus = kHzBus\n  },\n}))\n\nconst StoreModel = types.model({\n  form: FormModel\n}).views(self => ({\n  get spec() {\n    return I2CSpec[self.form.twiMode]\n  },\n  get nanoRiseTime() {\n    return 0.8473 * parseFloat(self.form.kOhm) * parseFloat(self.form.pF)\n  },\n  get sinkMA() {\n    return parseFloat(self.form.vcc) >= 2 ? 3 : 2\n  },\n  get maxLowVoltage() {\n    const vcc = parseFloat(self.form.vcc)\n    return vcc >= 2 ? self.spec.maxLowVoltage : self.spec.maxLowVoltageBelowTwo(vcc)\n  },\n  get minR() {\n    return (parseFloat(self.form.vcc) - self.maxLowVoltage) / self.sinkMA\n  },\n  get maxR() {\n    return self.spec.maxNanoRise / (0.8473 * parseFloat(self.form.pF))\n  },\n  get baud() {\n    const riseTime = self.nanoRiseTime / 1e9\n    const MHzMcu = parseFloat(self.form.MHzMcu) * 1000000\n    const kHzBus = parseFloat(self.form.kHzBus) * 1000\n    return (MHzMcu - kHzBus * MHzMcu * riseTime - kHzBus * 10) / (kHzBus * 2)\n  }\n}))\n\nconst store = StoreModel.create({form: FormModel.create({})})\n\nconst prefixSI = function prefixSI(value) {\n  if (value >= 1000000) {\n    return ['M', 1000000]\n  } else if (value >= 1000) {\n    return ['k', 1000]\n  }\n  return ['', 1]\n}\n\nconst friendlyFrequency = function friendlyFrequency(frequency) {\n  const [suffix, divider] = prefixSI(frequency)\n  return `${Math.trunc(frequency / divider)} ${suffix}Hz`\n}\n\n\nconst TWIMode = observer(function TWIMode() {\n  const {spec} = store\n  const {twiMode, setTwiMode} = store.form\n\n  const modeSelectors = I2CSpec.map(spec => {\n    return (\n      <button\n        key={spec.id}\n        onClick={e => setTwiMode(spec.id)}\n        className={twiMode === spec.id ? 'selected' : ''}\n      >{spec.name} ({friendlyFrequency(spec.maxKHzBus * 1000)})</button>\n    )\n  })\n\n\n  return (\n    <div className='twi-mode'>\n      {modeSelectors}\n      <div className=\"row\">\n        <div>Max T<sub>rise</sub></div>\n        <div>{spec.maxNanoRise}</div>\n        <div>ns</div>\n      </div>\n      <div className=\"row margin-bottom\">\n        <div>Max capacitance</div>\n        <div>{spec.maxPF}</div>\n        <div>pF</div>\n      </div>\n    </div>\n  )\n})\n\nconst RiseTimeCalculator = observer(function RiseTimeCalclator() {\n  const {maxLowVoltage, minR, maxR, spec} = store\n  const {vcc, setVcc, pF, setPF, kOhm, setKOhm} = store.form\n\n  return (\n    <div className='rise-time-calculator border-block'>\n      <div className='row'>\n        <div>VCC</div>\n        <input className={isNaN(maxLowVoltage) ? 'error' : ''} value={vcc} onChange={e => setVcc(e.target.value)}/>\n        <div>V</div>\n      </div>\n      <div className='row'>\n        <div>Bus capacitance</div>\n        <input className={pF > spec.maxPF ? 'error' : ''} value={pF} onChange={e => setPF(e.target.value)}/>\n        <div>pF</div>\n      </div>\n      <div className='row'>\n        <div>Bus pull-up resistance</div>\n        <input className={(kOhm > maxR || kOhm < minR) ? 'error' : ''} value={kOhm}\n               onChange={e => setKOhm(e.target.value)}/>\n        <div>kΩ (&gt;{minR.toFixed(1)} kΩ, &lt;{maxR.toFixed(1)} kΩ)</div>\n      </div>\n    </div>\n  )\n})\n\nconst BaudRateCalculator = observer(function BaudRateCalculator(props) {\n  const {baud, nanoRiseTime, spec} = store\n  const {MHzMcu, setMHzMcu, kHzBus, setKHzBus} = store.form\n\n  return (\n    <div className='baud-rate-calculator border-block'>\n      <div className='row'>\n        <div>MCU frequency</div>\n        <input value={MHzMcu} onChange={e => setMHzMcu(e.target.value)}/>\n        <div>MHz</div>\n      </div>\n      <div className='row margin-bottom'>\n        <div>Bus frequency</div>\n        <input className={kHzBus > spec.maxKHzBus ? 'error' : ''} value={kHzBus}\n               onChange={e => setKHzBus(e.target.value)}/>\n        <div>kHz</div>\n      </div>\n      <div className='rise-time'>T<sub>rise</sub> is {Math.trunc(nanoRiseTime)} ns</div>\n      <div className='baud'>BAUD is {Math.trunc(baud)}</div>\n    </div>\n  )\n})\n\nconst MainView = function MainView() {\n\n  return (\n    <div className=\"main-view\">\n      <div className='title'>TWI I<sup>2</sup>C BAUD Calculator</div>\n      <div className='subtitle'>For ATtiny 1-series and similar devices</div>\n      <div className='info'>\n        Estimate your TWI I<sup>2</sup>C BAUD rate and pull-up resistors.<br/>\n        A too high pull-up resistance may not manage to pull the signal to logic high during a single clock cycle.<br/>\n        A too low pull-up resistance may lead to bus devices being unable to sink enough current to pull the signal to logic low.<br/>\n        Bus capacitance can be very roughly estimated by adding 20 pF for every device on the bus if distances are\n        short. <br/>\n        BAUD in this context determines how long a clock signal is kept high after a high level is detected. Therefore a higher\n        BAUD results in a slower bus clock. In practice due to bus capacitance and pull-up resistance some time of the clock cycle is\n        lost while the bus voltage rises to a logic high (T<sub>rise</sub>). To compensate for this, BAUD can be set to a lower value.\n      </div>\n      <TWIMode/>\n      <RiseTimeCalculator/>\n      <BaudRateCalculator/>\n    </div>\n  );\n}\n\nexport default MainView;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainView from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MainView/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}