{"version":3,"sources":["App.js","index.js"],"names":["I2CSpec","id","name","maxKHzBus","maxNanoRise","maxPF","maxLowVoltage","maxLowVoltageBelowTwo","NaN","minBaud","vcc","FormModel","types","model","twiMode","optional","number","string","pF","kOhm","MHzMcu","kHzBus","actions","self","setTwiMode","spec","toString","setVcc","setPF","setKOhm","setMHzMcu","setKHzBus","store","form","views","parseFloat","R","sinkMA","Math","ceil","floor","riseTime","nanoRiseTime","create","TWIMode","observer","modeSelectors","map","key","onClick","e","className","frequency","value","suffix","divider","trunc","friendlyFrequency","RiseTimeCalculator","minR","maxR","minmax","toFixed","resistanceClassNames","filter","c","join","isNaN","onChange","target","BaudRateCalculator","props","baud","MainView","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b910214f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\nimport {types} from \"mobx-state-tree\";\nimport {observer} from \"mobx-react\";\n\nconst I2CSpec = [\n  {\n    id: 0,\n    name: 'Standard Mode',\n    maxKHzBus: 100,\n    maxNanoRise: 1000,\n    maxPF: 400,\n    maxLowVoltage: 0.4,\n    maxLowVoltageBelowTwo: () => NaN,\n    minBaud: 1,\n  },\n  {\n    id: 1,\n    name: 'Fast Mode',\n    maxKHzBus: 400,\n    maxNanoRise: 300,\n    maxPF: 400,\n    maxLowVoltage: 0.4,\n    maxLowVoltageBelowTwo: vcc => 0.2 * vcc,\n    minBaud: 1,\n  },\n  {\n    id: 2,\n    name: 'Fast Mode Plus',\n    maxKHzBus: 1000,\n    maxNanoRise: 120,\n    maxPF: 550,\n    maxLowVoltage: 0.4,\n    maxLowVoltageBelowTwo: vcc => 0.2 * vcc,\n    minBaud: 3,\n  }\n]\n\nconst FormModel = types.model({\n  twiMode: types.optional(types.number, 0),\n  vcc: types.optional(types.string, '5.0'),\n  pF: types.optional(types.string, '40'),\n  kOhm: types.optional(types.string, '4.7'),\n  MHzMcu: types.optional(types.string, '20'),\n  kHzBus: types.optional(types.string, '100'),\n}).actions(self => ({\n  setTwiMode: function setTwiMode(twiMode) {\n    self.twiMode = twiMode\n    const spec = I2CSpec[twiMode]\n    self.kHzBus = spec.maxKHzBus.toString()\n  },\n  setVcc: function setVcc(vcc) {\n    self.vcc = vcc\n  },\n  setPF: function setPf(pF) {\n    self.pF = pF\n  },\n  setKOhm: function setKOhm(kOhm) {\n    self.kOhm = kOhm\n  },\n  setMHzMcu: function setMHzMcu(MHzMcu) {\n    self.MHzMcu = MHzMcu\n  },\n  setKHzBus: function setKHzBus(kHzBus) {\n    self.kHzBus = kHzBus\n  },\n}))\n\nconst StoreModel = types.model({\n  form: FormModel\n}).views(self => ({\n  get spec() {\n    return I2CSpec[self.form.twiMode]\n  },\n  get nanoRiseTime() {\n    return 0.8473 * parseFloat(self.form.kOhm) * parseFloat(self.form.pF)\n  },\n  get sinkMA() {\n    return parseFloat(self.form.vcc) >= 2 ? 3 : 2\n  },\n  get maxLowVoltage() {\n    const vcc = parseFloat(self.form.vcc)\n    return vcc >= 2 ? self.spec.maxLowVoltage : self.spec.maxLowVoltageBelowTwo(vcc)\n  },\n  get minR() {\n    const R = (parseFloat(self.form.vcc) - self.maxLowVoltage) / self.sinkMA\n    return Math.ceil(R * 10) / 10\n  },\n  get maxR() {\n    const R = self.spec.maxNanoRise / (0.8473 * parseFloat(self.form.pF))\n    return Math.floor(R * 10) / 10\n  },\n  get baud() {\n    const riseTime = self.nanoRiseTime / 1e9\n    const MHzMcu = parseFloat(self.form.MHzMcu) * 1000000\n    const kHzBus = parseFloat(self.form.kHzBus) * 1000\n    return (MHzMcu - kHzBus * MHzMcu * riseTime - kHzBus * 10) / (kHzBus * 2)\n  }\n}))\n\nconst store = StoreModel.create({form: FormModel.create({})})\n\nconst prefixSI = function prefixSI(value) {\n  if (value >= 1000000) {\n    return ['M', 1000000]\n  } else if (value >= 1000) {\n    return ['k', 1000]\n  }\n  return ['', 1]\n}\n\nconst friendlyFrequency = function friendlyFrequency(frequency) {\n  const [suffix, divider] = prefixSI(frequency)\n  return `${Math.trunc(frequency / divider)} ${suffix}Hz`\n}\n\n\nconst TWIMode = observer(function TWIMode() {\n  const {spec} = store\n  const {twiMode, setTwiMode} = store.form\n\n  const modeSelectors = I2CSpec.map(spec => {\n    return (\n      <button\n        key={spec.id}\n        onClick={e => setTwiMode(spec.id)}\n        className={twiMode === spec.id ? 'selected' : ''}\n      >{spec.name} ({friendlyFrequency(spec.maxKHzBus * 1000)})</button>\n    )\n  })\n\n\n  return (\n    <div className='twi-mode'>\n      {modeSelectors}\n      <div className=\"row\">\n        <div>Max T<sub>rise</sub></div>\n        <div>{spec.maxNanoRise}</div>\n        <div>ns</div>\n      </div>\n      <div className=\"row margin-bottom\">\n        <div>Max capacitance</div>\n        <div>{spec.maxPF}</div>\n        <div>pF</div>\n      </div>\n    </div>\n  )\n})\n\nconst RiseTimeCalculator = observer(function RiseTimeCalclator() {\n  const {maxLowVoltage, minR, maxR, spec} = store\n  const {vcc, setVcc, pF, setPF, kOhm, setKOhm} = store.form\n\n  const minmax = minR <= maxR ? (\n    <div>kΩ ({minR.toFixed(1)} - {maxR.toFixed(1)} kΩ)</div>\n  ) : (\n    <div>kΩ (check VCC)</div>\n  )\n\n  const resistanceClasses = [\n    ['error', () => kOhm < minR || kOhm > maxR],\n    ['warning', () => !(kOhm < minR || kOhm > maxR) && ((1 - minR / kOhm) < 0.1 || (1 - kOhm / maxR) < 0.1)]\n  ]\n  const resistanceClassNames = resistanceClasses.filter(c => c[1]()).map(c => c[0]).join(' ')\n\n  return (\n    <div className='rise-time-calculator border-block'>\n      <div className='row'>\n        <div>VCC</div>\n        <input className={isNaN(maxLowVoltage) || (minR >= maxR) ? 'error' : ''} value={vcc}\n               onChange={e => setVcc(e.target.value)}/>\n        <div>V</div>\n      </div>\n      <div className='row'>\n        <div>Bus capacitance</div>\n        <input className={pF > spec.maxPF ? 'error' : ''} value={pF} onChange={e => setPF(e.target.value)}/>\n        <div>pF</div>\n      </div>\n      <div className='row'>\n        <div>Bus pull-up resistance</div>\n        <input className={resistanceClassNames} value={kOhm}\n               onChange={e => setKOhm(e.target.value)}/>\n        {minmax}\n      </div>\n    </div>\n  )\n})\n\nconst BaudRateCalculator = observer(function BaudRateCalculator(props) {\n  const {baud, nanoRiseTime, spec} = store\n  const {MHzMcu, setMHzMcu, kHzBus, setKHzBus} = store.form\n\n  return (\n    <div className='baud-rate-calculator border-block'>\n      <div className='row'>\n        <div>MCU frequency</div>\n        <input value={MHzMcu} onChange={e => setMHzMcu(e.target.value)}/>\n        <div>MHz</div>\n      </div>\n      <div className='row margin-bottom'>\n        <div>Bus frequency</div>\n        <input className={kHzBus > spec.maxKHzBus ? 'error' : ''} value={kHzBus}\n               onChange={e => setKHzBus(e.target.value)}/>\n        <div>kHz</div>\n      </div>\n      <div className='rise-time'>T<sub>rise</sub> is {Math.trunc(nanoRiseTime)} ns</div>\n      <div className='baud'>BAUD is {Math.ceil(baud)}</div>\n      {spec.minBaud > Math.ceil(baud) &&\n      <div className='error'>Baud cannot be less than {spec.minBaud} in {spec.name}</div>}\n    </div>\n  )\n})\n\nconst MainView = function MainView() {\n\n  return (\n    <div className=\"main-view\">\n      <div className='title'>TWI I<sup>2</sup>C BAUD Calculator</div>\n      <div className='subtitle'>For ATtiny 1-series and similar devices</div>\n\n      <TWIMode/>\n      <RiseTimeCalculator/>\n      <BaudRateCalculator/>\n\n      <div className='info'>\n        <p>Estimate your TWI I<sup>2</sup>C BAUD rate and pull-up resistors.</p>\n        <p>\n          A pull-up resistance that is too low may lead to bus devices being unable to sink enough current to pull the\n          signal\n          to logic low.\n        </p>\n        <p>\n          A pull-up resistance that is too high may not manage to pull the signal up fast enough to stay within the\n          limits of the specification.\n          This in turn may lead to undefined behaviour.\n        </p>\n        <p>\n          Bus capacitance, if measuring is not possible, can be very roughly estimated by adding 20 pF for every device\n          on the bus if distances are\n          short.\n        </p>\n        <p>\n          BAUD in this context determines how long a clock signal is kept high after a high level is detected.\n          Therefore a higher\n          BAUD results in a slower bus clock. In practice due to bus capacitance and pull-up resistance some time of the\n          clock cycle is\n          lost while the bus voltage rises to a logic high (T<sub>rise</sub>). To compensate for this, BAUD can be set\n          to a lower value.\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default MainView;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainView from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MainView/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}